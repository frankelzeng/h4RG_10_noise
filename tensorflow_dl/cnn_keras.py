from tensorflow import keras
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

__author__ = "Chenxiao Zeng"
__email__ = "zeng.544@osu.edu"

'''
The Training set is generated by taking 0:40 and 0:40 region and 
combine with the samples with extreme features in 0:200 and 0:200 region.
'''

def read_df():
    """ 
    Read the data frame file and remove the first row for duplicate engry 
    """
    df = pd.read_csv("/users/PCON0003/osu10644/h4RG_10_noise/tensorflow_dl/df_train_test_subset.csv")
    df = df.iloc[:, 1:]
    return df

def train_test():
    """ 
    Split the reading files into train and test sets 
    """
    df = read_df()
    X = df.iloc[:, :56]
    y = df.iloc[:, -1]
    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=1)
    return X_train, X_test, y_train, y_test.astype(int)

def normalize():
    """ 
    Normalize the time series into range 0 to 1 using MinMaxScaler in sklern
    """
    X_train, X_test, y_train, y_test = train_test()
    scaler=MinMaxScaler()
    X_train=pd.DataFrame(scaler.fit_transform(X_train.T).T,columns=X_train.columns)
    X_test=pd.DataFrame(scaler.fit_transform(X_test.T).T,columns=X_test.columns)
    return X_train.values, X_test.values, y_train.values, y_test.values

def plot_TimeSeries(y, name, x= np.arange(56).reshape(-1, 1), path="./", color='black', linestyle='-', linewidth=3):
    """
    Plot the series given the y values of the time series
    """
    fig = plt.figure(figsize=(12, 18))
    gs = gridspec.GridSpec(2, 1, height_ratios=[2, 1]) 
    gs.update(wspace=0.025, hspace=0) 
    ax0 = plt.subplot(gs[0])
    ax0.set_yscale("linear")
    ax0.set_xscale("linear")
    ax0.set_ylabel("Amplitude")
    ax0.set_xlabel("Time Frame")
    line, = ax0.plot(x, y, color = color, linestyle=linestyle, linewidth=linewidth)
    plt.savefig(path + name + ".pdf",dpi=300, bbox_inches='tight')
    return

def reshape_x():
    """
    Reshape the X input so that the fully convolutional neural nework can process
    """
    X_train, X_test, y_train, y_test = normalize()
    X_train_ = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))
    X_test_ = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))
    return X_train_, X_test_, y_train, y_test

def make_model(input_shape):
    """
    Construct the Convolutional Neural Network model
    """
    input_layer = keras.layers.Input(input_shape)
    
    conv1 = keras.layers.Conv1D(filters=64, kernel_size=3, padding="same")(input_layer)
    conv1 = keras.layers.BatchNormalization()(conv1)
    conv1 = keras.layers.ReLU()(conv1)

    conv2 = keras.layers.Conv1D(filters=64, kernel_size=3, padding="same")(conv1)
    conv2 = keras.layers.BatchNormalization()(conv2)
    conv2 = keras.layers.ReLU()(conv2)

    conv3 = keras.layers.Conv1D(filters=64, kernel_size=3, padding="same")(conv2)
    conv3 = keras.layers.BatchNormalization()(conv3)
    conv3 = keras.layers.ReLU()(conv3)

    gap = keras.layers.GlobalAveragePooling1D()(conv3)

    output_layer = keras.layers.Dense(num_classes, activation="softmax")(gap)
    return keras.models.Model(inputs=input_layer, outputs=output_layer)

X_train, X_test, y_train, y_test = reshape_x()
print(X_train)
